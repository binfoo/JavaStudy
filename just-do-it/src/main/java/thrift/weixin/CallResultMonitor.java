/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.weixin;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CallResultMonitor implements org.apache.thrift.TBase<CallResultMonitor, CallResultMonitor._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CallResultMonitor");

  private static final org.apache.thrift.protocol.TField RETURN_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("returnCode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARAM1_FIELD_DESC = new org.apache.thrift.protocol.TField("param1", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PARAM2_FIELD_DESC = new org.apache.thrift.protocol.TField("param2", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RETURN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("returnInfo", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CallResultMonitorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CallResultMonitorTupleSchemeFactory());
  }

  public int returnCode; // required
  public int param1; // required
  public String param2; // required
  public String returnInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RETURN_CODE((short)1, "returnCode"),
    PARAM1((short)2, "param1"),
    PARAM2((short)3, "param2"),
    RETURN_INFO((short)4, "returnInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RETURN_CODE
          return RETURN_CODE;
        case 2: // PARAM1
          return PARAM1;
        case 3: // PARAM2
          return PARAM2;
        case 4: // RETURN_INFO
          return RETURN_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RETURNCODE_ISSET_ID = 0;
  private static final int __PARAM1_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RETURN_CODE, new org.apache.thrift.meta_data.FieldMetaData("returnCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARAM1, new org.apache.thrift.meta_data.FieldMetaData("param1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARAM2, new org.apache.thrift.meta_data.FieldMetaData("param2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_INFO, new org.apache.thrift.meta_data.FieldMetaData("returnInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CallResultMonitor.class, metaDataMap);
  }

  public CallResultMonitor() {
  }

  public CallResultMonitor(
    int returnCode,
    int param1,
    String param2,
    String returnInfo)
  {
    this();
    this.returnCode = returnCode;
    setReturnCodeIsSet(true);
    this.param1 = param1;
    setParam1IsSet(true);
    this.param2 = param2;
    this.returnInfo = returnInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CallResultMonitor(CallResultMonitor other) {
    __isset_bitfield = other.__isset_bitfield;
    this.returnCode = other.returnCode;
    this.param1 = other.param1;
    if (other.isSetParam2()) {
      this.param2 = other.param2;
    }
    if (other.isSetReturnInfo()) {
      this.returnInfo = other.returnInfo;
    }
  }

  public CallResultMonitor deepCopy() {
    return new CallResultMonitor(this);
  }

  @Override
  public void clear() {
    setReturnCodeIsSet(false);
    this.returnCode = 0;
    setParam1IsSet(false);
    this.param1 = 0;
    this.param2 = null;
    this.returnInfo = null;
  }

  public int getReturnCode() {
    return this.returnCode;
  }

  public CallResultMonitor setReturnCode(int returnCode) {
    this.returnCode = returnCode;
    setReturnCodeIsSet(true);
    return this;
  }

  public void unsetReturnCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNCODE_ISSET_ID);
  }

  /** Returns true if field returnCode is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnCode() {
    return EncodingUtils.testBit(__isset_bitfield, __RETURNCODE_ISSET_ID);
  }

  public void setReturnCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNCODE_ISSET_ID, value);
  }

  public int getParam1() {
    return this.param1;
  }

  public CallResultMonitor setParam1(int param1) {
    this.param1 = param1;
    setParam1IsSet(true);
    return this;
  }

  public void unsetParam1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARAM1_ISSET_ID);
  }

  /** Returns true if field param1 is set (has been assigned a value) and false otherwise */
  public boolean isSetParam1() {
    return EncodingUtils.testBit(__isset_bitfield, __PARAM1_ISSET_ID);
  }

  public void setParam1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARAM1_ISSET_ID, value);
  }

  public String getParam2() {
    return this.param2;
  }

  public CallResultMonitor setParam2(String param2) {
    this.param2 = param2;
    return this;
  }

  public void unsetParam2() {
    this.param2 = null;
  }

  /** Returns true if field param2 is set (has been assigned a value) and false otherwise */
  public boolean isSetParam2() {
    return this.param2 != null;
  }

  public void setParam2IsSet(boolean value) {
    if (!value) {
      this.param2 = null;
    }
  }

  public String getReturnInfo() {
    return this.returnInfo;
  }

  public CallResultMonitor setReturnInfo(String returnInfo) {
    this.returnInfo = returnInfo;
    return this;
  }

  public void unsetReturnInfo() {
    this.returnInfo = null;
  }

  /** Returns true if field returnInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnInfo() {
    return this.returnInfo != null;
  }

  public void setReturnInfoIsSet(boolean value) {
    if (!value) {
      this.returnInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RETURN_CODE:
      if (value == null) {
        unsetReturnCode();
      } else {
        setReturnCode((Integer)value);
      }
      break;

    case PARAM1:
      if (value == null) {
        unsetParam1();
      } else {
        setParam1((Integer)value);
      }
      break;

    case PARAM2:
      if (value == null) {
        unsetParam2();
      } else {
        setParam2((String)value);
      }
      break;

    case RETURN_INFO:
      if (value == null) {
        unsetReturnInfo();
      } else {
        setReturnInfo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RETURN_CODE:
      return Integer.valueOf(getReturnCode());

    case PARAM1:
      return Integer.valueOf(getParam1());

    case PARAM2:
      return getParam2();

    case RETURN_INFO:
      return getReturnInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RETURN_CODE:
      return isSetReturnCode();
    case PARAM1:
      return isSetParam1();
    case PARAM2:
      return isSetParam2();
    case RETURN_INFO:
      return isSetReturnInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CallResultMonitor)
      return this.equals((CallResultMonitor)that);
    return false;
  }

  public boolean equals(CallResultMonitor that) {
    if (that == null)
      return false;

    boolean this_present_returnCode = true;
    boolean that_present_returnCode = true;
    if (this_present_returnCode || that_present_returnCode) {
      if (!(this_present_returnCode && that_present_returnCode))
        return false;
      if (this.returnCode != that.returnCode)
        return false;
    }

    boolean this_present_param1 = true;
    boolean that_present_param1 = true;
    if (this_present_param1 || that_present_param1) {
      if (!(this_present_param1 && that_present_param1))
        return false;
      if (this.param1 != that.param1)
        return false;
    }

    boolean this_present_param2 = true && this.isSetParam2();
    boolean that_present_param2 = true && that.isSetParam2();
    if (this_present_param2 || that_present_param2) {
      if (!(this_present_param2 && that_present_param2))
        return false;
      if (!this.param2.equals(that.param2))
        return false;
    }

    boolean this_present_returnInfo = true && this.isSetReturnInfo();
    boolean that_present_returnInfo = true && that.isSetReturnInfo();
    if (this_present_returnInfo || that_present_returnInfo) {
      if (!(this_present_returnInfo && that_present_returnInfo))
        return false;
      if (!this.returnInfo.equals(that.returnInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CallResultMonitor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CallResultMonitor typedOther = (CallResultMonitor)other;

    lastComparison = Boolean.valueOf(isSetReturnCode()).compareTo(typedOther.isSetReturnCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnCode, typedOther.returnCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParam1()).compareTo(typedOther.isSetParam1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param1, typedOther.param1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParam2()).compareTo(typedOther.isSetParam2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param2, typedOther.param2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnInfo()).compareTo(typedOther.isSetReturnInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnInfo, typedOther.returnInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CallResultMonitor(");
    boolean first = true;

    sb.append("returnCode:");
    sb.append(this.returnCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("param1:");
    sb.append(this.param1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("param2:");
    if (this.param2 == null) {
      sb.append("null");
    } else {
      sb.append(this.param2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnInfo:");
    if (this.returnInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.returnInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CallResultMonitorStandardSchemeFactory implements SchemeFactory {
    public CallResultMonitorStandardScheme getScheme() {
      return new CallResultMonitorStandardScheme();
    }
  }

  private static class CallResultMonitorStandardScheme extends StandardScheme<CallResultMonitor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CallResultMonitor struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RETURN_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.returnCode = iprot.readI32();
              struct.setReturnCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARAM1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.param1 = iprot.readI32();
              struct.setParam1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAM2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.param2 = iprot.readString();
              struct.setParam2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RETURN_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.returnInfo = iprot.readString();
              struct.setReturnInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CallResultMonitor struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RETURN_CODE_FIELD_DESC);
      oprot.writeI32(struct.returnCode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARAM1_FIELD_DESC);
      oprot.writeI32(struct.param1);
      oprot.writeFieldEnd();
      if (struct.param2 != null) {
        oprot.writeFieldBegin(PARAM2_FIELD_DESC);
        oprot.writeString(struct.param2);
        oprot.writeFieldEnd();
      }
      if (struct.returnInfo != null) {
        oprot.writeFieldBegin(RETURN_INFO_FIELD_DESC);
        oprot.writeString(struct.returnInfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CallResultMonitorTupleSchemeFactory implements SchemeFactory {
    public CallResultMonitorTupleScheme getScheme() {
      return new CallResultMonitorTupleScheme();
    }
  }

  private static class CallResultMonitorTupleScheme extends TupleScheme<CallResultMonitor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CallResultMonitor struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReturnCode()) {
        optionals.set(0);
      }
      if (struct.isSetParam1()) {
        optionals.set(1);
      }
      if (struct.isSetParam2()) {
        optionals.set(2);
      }
      if (struct.isSetReturnInfo()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetReturnCode()) {
        oprot.writeI32(struct.returnCode);
      }
      if (struct.isSetParam1()) {
        oprot.writeI32(struct.param1);
      }
      if (struct.isSetParam2()) {
        oprot.writeString(struct.param2);
      }
      if (struct.isSetReturnInfo()) {
        oprot.writeString(struct.returnInfo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CallResultMonitor struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.returnCode = iprot.readI32();
        struct.setReturnCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.param1 = iprot.readI32();
        struct.setParam1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.param2 = iprot.readString();
        struct.setParam2IsSet(true);
      }
      if (incoming.get(3)) {
        struct.returnInfo = iprot.readString();
        struct.setReturnInfoIsSet(true);
      }
    }
  }

}

