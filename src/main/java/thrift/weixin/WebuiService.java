/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.weixin;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WebuiService {

  public interface Iface {

    public CallResult callCommand(int cmdNo, String jsonCmd1, String jsonCmd2) throws TException;

  }

  public interface AsyncIface {

    public void callCommand(int cmdNo, String jsonCmd1, String jsonCmd2, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.callCommand_call> resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public CallResult callCommand(int cmdNo, String jsonCmd1, String jsonCmd2) throws TException
    {
      send_callCommand(cmdNo, jsonCmd1, jsonCmd2);
      return recv_callCommand();
    }

    public void send_callCommand(int cmdNo, String jsonCmd1, String jsonCmd2) throws TException
    {
      callCommand_args args = new callCommand_args();
      args.setCmdNo(cmdNo);
      args.setJsonCmd1(jsonCmd1);
      args.setJsonCmd2(jsonCmd2);
      sendBase("callCommand", args);
    }

    public CallResult recv_callCommand() throws TException
    {
      callCommand_result result = new callCommand_result();
      receiveBase(result, "callCommand");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "callCommand failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void callCommand(int cmdNo, String jsonCmd1, String jsonCmd2, org.apache.thrift.async.AsyncMethodCallback<callCommand_call> resultHandler) throws TException {
      checkReady();
      callCommand_call method_call = new callCommand_call(cmdNo, jsonCmd1, jsonCmd2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class callCommand_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cmdNo;
      private String jsonCmd1;
      private String jsonCmd2;
      public callCommand_call(int cmdNo, String jsonCmd1, String jsonCmd2, org.apache.thrift.async.AsyncMethodCallback<callCommand_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cmdNo = cmdNo;
        this.jsonCmd1 = jsonCmd1;
        this.jsonCmd2 = jsonCmd2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("callCommand", org.apache.thrift.protocol.TMessageType.CALL, 0));
        callCommand_args args = new callCommand_args();
        args.setCmdNo(cmdNo);
        args.setJsonCmd1(jsonCmd1);
        args.setJsonCmd2(jsonCmd2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CallResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_callCommand();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("callCommand", new callCommand());
      return processMap;
    }

    public static class callCommand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, callCommand_args> {
      public callCommand() {
        super("callCommand");
      }

      public callCommand_args getEmptyArgsInstance() {
        return new callCommand_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public callCommand_result getResult(I iface, callCommand_args args) throws TException {
        callCommand_result result = new callCommand_result();
        result.success = iface.callCommand(args.cmdNo, args.jsonCmd1, args.jsonCmd2);
        return result;
      }
    }

  }

  public static class callCommand_args implements org.apache.thrift.TBase<callCommand_args, callCommand_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("callCommand_args");

    private static final org.apache.thrift.protocol.TField CMD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cmdNo", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_CMD1_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonCmd1", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField JSON_CMD2_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonCmd2", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new callCommand_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new callCommand_argsTupleSchemeFactory());
    }

    public int cmdNo; // required
    public String jsonCmd1; // required
    public String jsonCmd2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CMD_NO((short)1, "cmdNo"),
      JSON_CMD1((short)2, "jsonCmd1"),
      JSON_CMD2((short)3, "jsonCmd2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CMD_NO
            return CMD_NO;
          case 2: // JSON_CMD1
            return JSON_CMD1;
          case 3: // JSON_CMD2
            return JSON_CMD2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CMDNO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CMD_NO, new org.apache.thrift.meta_data.FieldMetaData("cmdNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.JSON_CMD1, new org.apache.thrift.meta_data.FieldMetaData("jsonCmd1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_CMD2, new org.apache.thrift.meta_data.FieldMetaData("jsonCmd2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(callCommand_args.class, metaDataMap);
    }

    public callCommand_args() {
    }

    public callCommand_args(
      int cmdNo,
      String jsonCmd1,
      String jsonCmd2)
    {
      this();
      this.cmdNo = cmdNo;
      setCmdNoIsSet(true);
      this.jsonCmd1 = jsonCmd1;
      this.jsonCmd2 = jsonCmd2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public callCommand_args(callCommand_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cmdNo = other.cmdNo;
      if (other.isSetJsonCmd1()) {
        this.jsonCmd1 = other.jsonCmd1;
      }
      if (other.isSetJsonCmd2()) {
        this.jsonCmd2 = other.jsonCmd2;
      }
    }

    public callCommand_args deepCopy() {
      return new callCommand_args(this);
    }

    @Override
    public void clear() {
      setCmdNoIsSet(false);
      this.cmdNo = 0;
      this.jsonCmd1 = null;
      this.jsonCmd2 = null;
    }

    public int getCmdNo() {
      return this.cmdNo;
    }

    public callCommand_args setCmdNo(int cmdNo) {
      this.cmdNo = cmdNo;
      setCmdNoIsSet(true);
      return this;
    }

    public void unsetCmdNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CMDNO_ISSET_ID);
    }

    /** Returns true if field cmdNo is set (has been assigned a value) and false otherwise */
    public boolean isSetCmdNo() {
      return EncodingUtils.testBit(__isset_bitfield, __CMDNO_ISSET_ID);
    }

    public void setCmdNoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CMDNO_ISSET_ID, value);
    }

    public String getJsonCmd1() {
      return this.jsonCmd1;
    }

    public callCommand_args setJsonCmd1(String jsonCmd1) {
      this.jsonCmd1 = jsonCmd1;
      return this;
    }

    public void unsetJsonCmd1() {
      this.jsonCmd1 = null;
    }

    /** Returns true if field jsonCmd1 is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonCmd1() {
      return this.jsonCmd1 != null;
    }

    public void setJsonCmd1IsSet(boolean value) {
      if (!value) {
        this.jsonCmd1 = null;
      }
    }

    public String getJsonCmd2() {
      return this.jsonCmd2;
    }

    public callCommand_args setJsonCmd2(String jsonCmd2) {
      this.jsonCmd2 = jsonCmd2;
      return this;
    }

    public void unsetJsonCmd2() {
      this.jsonCmd2 = null;
    }

    /** Returns true if field jsonCmd2 is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonCmd2() {
      return this.jsonCmd2 != null;
    }

    public void setJsonCmd2IsSet(boolean value) {
      if (!value) {
        this.jsonCmd2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CMD_NO:
        if (value == null) {
          unsetCmdNo();
        } else {
          setCmdNo((Integer)value);
        }
        break;

      case JSON_CMD1:
        if (value == null) {
          unsetJsonCmd1();
        } else {
          setJsonCmd1((String)value);
        }
        break;

      case JSON_CMD2:
        if (value == null) {
          unsetJsonCmd2();
        } else {
          setJsonCmd2((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CMD_NO:
        return Integer.valueOf(getCmdNo());

      case JSON_CMD1:
        return getJsonCmd1();

      case JSON_CMD2:
        return getJsonCmd2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CMD_NO:
        return isSetCmdNo();
      case JSON_CMD1:
        return isSetJsonCmd1();
      case JSON_CMD2:
        return isSetJsonCmd2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof callCommand_args)
        return this.equals((callCommand_args)that);
      return false;
    }

    public boolean equals(callCommand_args that) {
      if (that == null)
        return false;

      boolean this_present_cmdNo = true;
      boolean that_present_cmdNo = true;
      if (this_present_cmdNo || that_present_cmdNo) {
        if (!(this_present_cmdNo && that_present_cmdNo))
          return false;
        if (this.cmdNo != that.cmdNo)
          return false;
      }

      boolean this_present_jsonCmd1 = true && this.isSetJsonCmd1();
      boolean that_present_jsonCmd1 = true && that.isSetJsonCmd1();
      if (this_present_jsonCmd1 || that_present_jsonCmd1) {
        if (!(this_present_jsonCmd1 && that_present_jsonCmd1))
          return false;
        if (!this.jsonCmd1.equals(that.jsonCmd1))
          return false;
      }

      boolean this_present_jsonCmd2 = true && this.isSetJsonCmd2();
      boolean that_present_jsonCmd2 = true && that.isSetJsonCmd2();
      if (this_present_jsonCmd2 || that_present_jsonCmd2) {
        if (!(this_present_jsonCmd2 && that_present_jsonCmd2))
          return false;
        if (!this.jsonCmd2.equals(that.jsonCmd2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(callCommand_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      callCommand_args typedOther = (callCommand_args)other;

      lastComparison = Boolean.valueOf(isSetCmdNo()).compareTo(typedOther.isSetCmdNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCmdNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmdNo, typedOther.cmdNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJsonCmd1()).compareTo(typedOther.isSetJsonCmd1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonCmd1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonCmd1, typedOther.jsonCmd1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJsonCmd2()).compareTo(typedOther.isSetJsonCmd2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonCmd2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonCmd2, typedOther.jsonCmd2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("callCommand_args(");
      boolean first = true;

      sb.append("cmdNo:");
      sb.append(this.cmdNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonCmd1:");
      if (this.jsonCmd1 == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonCmd1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonCmd2:");
      if (this.jsonCmd2 == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonCmd2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class callCommand_argsStandardSchemeFactory implements SchemeFactory {
      public callCommand_argsStandardScheme getScheme() {
        return new callCommand_argsStandardScheme();
      }
    }

    private static class callCommand_argsStandardScheme extends StandardScheme<callCommand_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, callCommand_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CMD_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cmdNo = iprot.readI32();
                struct.setCmdNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_CMD1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonCmd1 = iprot.readString();
                struct.setJsonCmd1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JSON_CMD2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonCmd2 = iprot.readString();
                struct.setJsonCmd2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, callCommand_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CMD_NO_FIELD_DESC);
        oprot.writeI32(struct.cmdNo);
        oprot.writeFieldEnd();
        if (struct.jsonCmd1 != null) {
          oprot.writeFieldBegin(JSON_CMD1_FIELD_DESC);
          oprot.writeString(struct.jsonCmd1);
          oprot.writeFieldEnd();
        }
        if (struct.jsonCmd2 != null) {
          oprot.writeFieldBegin(JSON_CMD2_FIELD_DESC);
          oprot.writeString(struct.jsonCmd2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class callCommand_argsTupleSchemeFactory implements SchemeFactory {
      public callCommand_argsTupleScheme getScheme() {
        return new callCommand_argsTupleScheme();
      }
    }

    private static class callCommand_argsTupleScheme extends TupleScheme<callCommand_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, callCommand_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCmdNo()) {
          optionals.set(0);
        }
        if (struct.isSetJsonCmd1()) {
          optionals.set(1);
        }
        if (struct.isSetJsonCmd2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCmdNo()) {
          oprot.writeI32(struct.cmdNo);
        }
        if (struct.isSetJsonCmd1()) {
          oprot.writeString(struct.jsonCmd1);
        }
        if (struct.isSetJsonCmd2()) {
          oprot.writeString(struct.jsonCmd2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, callCommand_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cmdNo = iprot.readI32();
          struct.setCmdNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonCmd1 = iprot.readString();
          struct.setJsonCmd1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.jsonCmd2 = iprot.readString();
          struct.setJsonCmd2IsSet(true);
        }
      }
    }

  }

  public static class callCommand_result implements org.apache.thrift.TBase<callCommand_result, callCommand_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("callCommand_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new callCommand_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new callCommand_resultTupleSchemeFactory());
    }

    public CallResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CallResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(callCommand_result.class, metaDataMap);
    }

    public callCommand_result() {
    }

    public callCommand_result(
      CallResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public callCommand_result(callCommand_result other) {
      if (other.isSetSuccess()) {
        this.success = new CallResult(other.success);
      }
    }

    public callCommand_result deepCopy() {
      return new callCommand_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CallResult getSuccess() {
      return this.success;
    }

    public callCommand_result setSuccess(CallResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CallResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof callCommand_result)
        return this.equals((callCommand_result)that);
      return false;
    }

    public boolean equals(callCommand_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(callCommand_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      callCommand_result typedOther = (callCommand_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("callCommand_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class callCommand_resultStandardSchemeFactory implements SchemeFactory {
      public callCommand_resultStandardScheme getScheme() {
        return new callCommand_resultStandardScheme();
      }
    }

    private static class callCommand_resultStandardScheme extends StandardScheme<callCommand_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, callCommand_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CallResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, callCommand_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class callCommand_resultTupleSchemeFactory implements SchemeFactory {
      public callCommand_resultTupleScheme getScheme() {
        return new callCommand_resultTupleScheme();
      }
    }

    private static class callCommand_resultTupleScheme extends TupleScheme<callCommand_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, callCommand_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, callCommand_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CallResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
